version: '3.7'
#        --serversTransport.insecureSkipVerify=true


#        --entrypoints.web.http.redirections.entrypoint.to=https
#        --entrypoints.web.http.redirections.entrypoint.scheme=https
#        --entrypoints.web.http.redirections.entrypoint.permanent=true   
services:
  traefik:
    image: traefik
    container_name: revproxy
    command: >
        --api.insecure=true
        --api.dashboard=true
        --api=true
        --log=true
        --log.level=DEBUG
        --accessLog=true
        --accessLog.bufferingSize=100
        --providers.docker=true
        --providers.docker.endpoint=unix:///var/run/docker.sock
        --providers.docker.exposedbydefault=false
        --entrypoints.smtp.address=:25
        --entrypoints.web.address=:80
        --entrypoints.websecure.address=:443
        --entrypoints.web.http.redirections.entrypoint.to=websecure
        --entrypoints.web.http.redirections.entrypoint.scheme=https
        --certificatesresolvers.internalca.acme.caServer=https://${ACMECA_DOMAIN}.${ROOT_DOMAIN}/acme/directory
        --certificatesresolvers.internalca.acme.httpChallenge=true
        --certificatesresolvers.internalca.acme.httpChallenge.entryPoint=websecure
        --certificatesresolvers.internalca.acme.email=admin@${ROOT_DOMAIN}
        --certificatesresolvers.internalca.acme.storage=/acme/acme.json
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80" #generic http entrypoint
      - "443:443" #generic https entrypoint
      - "8080:8080" #traefik web ui
      - "1883:1883" # mqtt
      - "9001:9001" # mqttwebsocket
      - "8086:8086" # InfluxDB
      - "9000:9000" # AcmeCA
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # ENSURE READ-ONLY
      - ./config/traefik/acme:/acme
      - ./config/ca/root.key:/root.key:ro
    environment:
      - TZ=${DEFAULT_TIMEZONE}
      - PUID=${DEFAULT_PUID}
      - GUID=${DEFAULT_PGID}
      - SSL_CERT_FILE=/root.key
#      - LEGO_CA_CERTIFICATES=/rootca.crt
#      - LEGO_CA_SERVER_NAME=${CA_DNS_FQDN}
    depends_on:
      - acmeca      
    networks:
      default:
        aliases:
          - "${TRAEFIK_DOMAIN}.${ROOT_DOMAIN}"      
    labels:
      - "traefik.enable=true"
      #- traefik.docker.network=traefik_proxy
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.customResponseHeaders: X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex"
      - "traefik.frontend.headers.frameDeny=true"
      - "traefik.http.routers.traefik.entrypoints=http"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN}.${ROOT_DOMAIN}`)"
#      - "traefik.http.routers.traefik.tls=true"
#      - "traefik.http.routers.traefik.tls.certresolver=internalca"


  smtp:
    image: axllent/mailpit:latest
    container_name: smtp
    networks:
      default:
        aliases:
          - ${SMTP_DOMAIN}.${ROOT_DOMAIN}       
    depends_on:
      - revproxy
    environment:
      - MP_SMTP_ALLOWED_RECIPIENTS=${SMTP_WHITELIST_DOMAINS}
      - MP_SMTP_AUTH_ACCEPT_ANY=true
      - MP_SMTP_AUTH_ALLOW_INSECURE=true
      - MP_SMTP_REQUIRE_TLS=false
      #- MP_SMTP_AUTH="user1:password1 user2:password"
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.smtp.entrypoints=smtp"
      - "traefik.tcp.services.smtp.loadbalancer.server.port=1025"   
      - "traefik.http.routers.smtp-ui.entrypoints=websecure"
      - "traefik.http.routers.smtp-ui.rule=Host(`${SMTP_DOMAIN}.${ROOT_DOMAIN}`)"
      - "traefik.http.services.smtp-ui.loadbalancer.server.port=8025"   
      - "traefik.http.routers.smtp-ui.tls=true"
      - "traefik.http.routers.smtp-ui.tls.certresolver=internalresolver"

  authelia:
    image: authelia/authelia
    container_name: auth
    volumes:
      - ./data/authelia:/config
      - ./config/authelia/configuration.yml:/config/configuration.yml
    networks:
      default:
        aliases:
          - ${AUTH_DOMAIN}.${ROOT_DOMAIN}
    restart: unless-stopped
    healthcheck:
      ## In production the healthcheck section should be commented.
      disable: true
    environment:
      - AUTHELIA_NOTIFIER_SMTP_ADDRESS=${AUTH_NOTIFIER_SMTP_ADDRESS:-smtp:8025}
      - AUTHELIA_NOTIFIER_SMTP_IDENTIFIER=${AUTH_DOMAIN}.${ROOT_DOMAIN}
      - AUTHELIA_NOTIFIER_SMTP_SENDER=${AUTH_NOTIFIER_SMTP_SENDER:-Authelia <admin@${ROOT_DOMAIN}>}
      - AUTHELIA_NOTIFIER_SMTP_SUBJECT=${AUTH_NOTIFIER_SMTP_SUBJECT:-"[Authelia] {title}"}
      - AUTHELIA_NOTIFIER_SMTP_STARTUP_CHECK_ADDRESS=${AUTH_NOTIFIER_SMTP_STARTUP_CHECK_ADDRESS:-test@${ROOT_DOMAIN}}
      - AUTHELIA_NOTIFIER_SMTP_DISABLE_REQUIRE_TLS=${AUTH_NOTIFIER_SMTP_DISABLE_REQUIRE_TLS:-true}
      - AUTHELIA_NOTIFIER_SMTP_TLS_SKIP_VERIFY=${AUTH_NOTIFIER_SMTP_TLS_SKIP_VERIFY:-true}
      - AUTHELIA_TOTP_ISSUER=${AUTH_TOTP_ISSUER:-eccentric.local}
      - AUTHELIA_AUTHENTICATION_BACKEND_FILE_PATH=/config/users.yml
      - X_AUTHELIA_CONFIG_FILTERS=expand-env,template
      - X_AUTHELIA_CONFIG=/config/configuration.yml
      - TOP_DOMAIN=${ROOT_DOMAIN}
      - AUTH_DOMAIN=${AUTH_DOMAIN}
      - LOGS_DOMAIN=${LOGS_DOMAIN}
      - AUTH_STORAGE_ENCRYPTION_KEY=${AUTH_STORAGE_ENCRYPTION_KEY}
      - AUTH_JWT_ENCRYPTION_KEY=${AUTH_JWT_ENCRYPTION_KEY}
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.auth.rule=Host(`${AUTH_DOMAIN}.${ROOT_DOMAIN}`)'
      - 'traefik.http.routers.auth.entrypoints=websecure'
      - "traefik.http.services.auth.loadbalancer.server.port=9091"
      - 'traefik.http.routers.auth.tls=true'
      - "traefik.http.routers.auth.tls.certresolver=internalresolver"
      - 'traefik.http.middlewares.auth.forwardauth.address=https://${AUTH_DOMAIN}.${ROOT_DOMAIN}/api/authz/forward-auth'  # yamllint disable-line rule:line-length
      - 'traefik.http.middlewares.auth.forwardauth.trustForwardHeader=true'
      - 'traefik.http.middlewares.auth.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email'  # yamllint disable-line rule:line-length


  drawio:
    image: jgraph/drawio
    container_name: drawio
    restart: unless-stopped
 #   ports:
 #     - 8080:8080  
 #     - 8443:8443  
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080 || exit 1"]
      interval: 1m30s
      timeout: 10s
      retries: 5
      start_period: 15s
    environment:
      TZ: ${DEFAULT_TIMEZONE}
      PUID: ${DEFAULT_PUID}
      GUID: ${DEFAULT_PGID}    
      DRAWIO_BASE_URL: "https://${DRAWIO_DOMAIN}.${ROOT_DOMAIN}"
#      - DRAWIO_GOOGLE_CLIENT_ID=abcd1234   # Google Drive
#      - DRAWIO_MSGRAPH_CLIENT_ID=abcd1234   # OneDrive
#      - DRAWIO_GITLAB_ID=abcd1234   # GitLab ID
    depends_on:
      - traefik  
    networks:
      default:
        aliases:
            - "${DRAWIO_DOMAIN}.${ROOT_DOMAIN}"        
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.drawio.rule=Host(`${DRAWIO_DOMAIN}.${ROOT_DOMAIN}`)"
      - "traefik.http.routers.drawio.entrypoints=websecure"
      - "traefik.http.routers.drawio.tls=true"
      - "traefik.http.routers.drawio.tls.certresolver=internalca"      
      - "traefik.http.services.drawio.loadbalancer.server.port=8080"


  bookstack:
    image: lscr.io/linuxserver/bookstack
    container_name: bookstack
    environment:
      PUID: "${DEFAULT_PUID}"
      PGID: "${DEFAULT_PGID}"
      APP_URL: "https://${BOOKSTACK_DOMAIN}.${ROOT_DOMAIN}"
      DB_HOST: "${BOOKSTACK_DB_HOST}"
      DB_PORT: "${BOOKSTACK_DB_PORT}"
      DB_USER: "${BOOKSTACK_DB_USER}"
      DB_PASS: "${BOOKSTACK_DB_PASS}"
      DB_DATABASE: "${BOOKSTACK_DB_DATABASE}"
      TIMEZONE: "${DEFAULT_TIMEZONE}"
      DRAWIO_HOST: "${DRAWIO_DOMAIN}.${ROOT_DOMAIN}"
      ENABLE_DRAWIO: 1
      APP_DEFAULT_DARK_MODE: 1
      WAIT_DB_INIT: 1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 1m30s
      timeout: 10s
      retries: 5     
      start_period: 15s         
    volumes:
      - ./data/bookstack_app_data:/config
    restart: unless-stopped
    depends_on:
      - bookstack_db
      - traefik
    networks:
      default:
        aliases:
            - "${BOOKSTACK_DOMAIN}.${ROOT_DOMAIN}"        
    labels:
      - "traefik.enable=true"
      #- "traefik.http.routers.bookstack-http.entrypoints=http"
      - "traefik.http.routers.bookstack.rule=Host(`${BOOKSTACK_DOMAIN}.${ROOT_DOMAIN}`)"
      - "traefik.http.routers.bookstack.entrypoints=websecure"
      - "traefik.tcp.routers.bookstack.service=bookstack-svc"
      - "traefik.tcp.services.bookstack-svc.loadbalancer.server.port=80"      
      - "traefik.http.routers.bookstack.tls=true"
      - "traefik.http.routers.bookstack.tls.certresolver=internalca"      


  bookstack_db:
    image: lscr.io/linuxserver/mariadb
    container_name: bookstack_db
    environment:
      PUID: "${DEFAULT_PUID}"
      PGID: "${DEFAULT_PGID}"
      TIMEZONE: "${DEFAULT_TIMEZONE}"
      MYSQL_ROOT_PASSWORD: "${BOOKSTACK_DB_MYSQL_ROOT_PASSWORD}"
      TZ: "${BOOKSTACK_DB_TZ}"
      MYSQL_DATABASE: "${BOOKSTACK_DB_MYSQL_DATABASE}"
      MYSQL_USER: "${BOOKSTACK_DB_MYSQL_USER}"
      MYSQL_PASSWORD: "${BOOKSTACK_DB_MYSQL_PASSWORD}"
    volumes:
      - ./data/bookstack-db:/config     
    restart: unless-stopped

  leandb:
    image: mysql
    restart: unless-stopped
    container_name: leandb
    volumes:
      - ./data/kanban-db:/var/lib/mysql     
    environment:
      user: "${DEFAULT_PUID}:${DEFAULT_PGID}"
      MYSQL_DATABASE: ${LEANTIME_DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${LEANTIME_DB_ROOT_PASS}      
      MYSQL_USER: ${LEANTIME_DB_USER}      
      MYSQL_PASSWORD: ${LEANTIME_DB_PASSWORD}      

  leantime:
    image: leantime/leantime:latest
    container_name: leantime
    restart: unless-stopped
    environment:
      LEAN_APP_URL: "https://${LEANTIME_DOMAIN}.${ROOT_DOMAIN}"
      LEAN_DB_HOST: ${LEANTIME_DB_HOST}
      LEAN_DB_USER: ${LEANTIME_DB_USER}
      LEAN_DB_PASSWORD: ${LEANTIME_DB_PASSWORD}
      LEAN_DB_DATABASE: ${LEANTIME_DB_DATABASE}
      LEAN_SITENAME: ${LEANTIME_SITENAME}
      LEAN_LANGUAGE: ${LEANTIME_LANGUAGE}
      LEAN_DEFAULT_TIMEZONE: ${DEFAULT_TIMEZONE}
    volumes:
      - ./data/kanban/public_userfiles:/var/www/html/public/userfiles     # Volume to store public files, logo etc
      - ./data/kanban/userfiles:/var/www/html/userfiles                   # Volume to store private user uploaded files
    depends_on:
      - leandb
      - traefik   
    networks:
      default:
        aliases:
            - "${LEANTIME_DOMAIN}.${ROOT_DOMAIN}"      
    labels:
      - "traefik.enable=true"
      #- "traefik.http.routers.bookstack-http.entrypoints=http"
      - "traefik.http.routers.leantime.rule=Host(`${LEANTIME_DOMAIN}.${ROOT_DOMAIN}`)"
      - "traefik.http.routers.leantime.entrypoints=http"
      - "traefik.http.routers.leantime.tls=true"
      - "traefik.http.routers.leantime.tls.certresolver=internalca"         
      - "traefik.http.services.leantime.loadbalancer.server.port=80"
      
  mindmapdb:
    image: mysql
    restart: unless-stopped
    container_name: mindmapdb
    volumes:
      - ./data/mindmap-db:/var/lib/mysql
###################################################################################################################
###################################################################################################################
#             RUN ON FIRST USE ONLY          RUN ON FIRST USE ONLY          RUN ON FIRST USE ONLY          
###################################################################################################################
      # Run on a blank MySQL database!, creates the DB
      # COMMENT OUT AFTER FIRST RUN OR DB WILL WIPE!

      # The below script will auto build the DB on first start (needed otherwsie mind map wont work)
      #- ./scripts/wisemapping/build_db.sql:/docker-entrypoint-initdb.d/init.sql

###################################################################################################################      
    environment:
      user: "${DEFAULT_PUID}:${DEFAULT_PGID}"
      MYSQL_DATABASE: ${WISEMAPPING_DB_NAME}
      MYSQL_ROOT_PASSWORD: ${WISEMAPPING_ROOT_PASS}      
    labels:
      # enable SSH port forward
      - "traefik.tcp.routers.minmap-mysql.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.minmap-mysql.entrypoints=mysql"
      - "traefik.tcp.routers.minmap-mysql.service=minmap-mysql-svc"
      - "traefik.tcp.services.minmap-mysql-svc.loadbalancer.server.port=3306"

  mindmap:
    image: wisemapping/wisemapping:5.0.14
    restart: unless-stopped
    container_name: mindmap
    depends_on:
      - mindmapdb
      - traefik
#    healthcheck:
#      test: ["CMD-SHELL", "curl -f http://localhost:8080 || exit 1"]
#      interval: 1m30s
#      timeout: 10s
#      retries: 5     
#      start_period: 15s   
    volumes:
      # Map below if you want to use the inbuilt/local H2
      #- ./data/mindmap-db:/var/lib/wisemapping/db
      #- ./data/mindmap-db:/var/lib/wise-db

      - ./config/wisemapping/app.properties:/usr/local/tomcat/webapps/ROOT/WEB-INF/app.properties      
    environment:
      TZ: ${DEFAULT_TIMEZONE}
      PUID: ${DEFAULT_PUID}
      GUID: ${DEFAULT_PGID}        
#      - BASE_URL=https://planka.noodle.local
      BASE_URL: "https://${WISEMAPPING_DOMAIN}.${ROOT_DOMAIN}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mindmap-http.entrypoints=websecure"
      - "traefik.http.routers.mindmap-http.rule=Host(`${WISEMAPPING_DOMAIN}.${ROOT_DOMAIN}`)"
      #- "traefik.http.routers.mindmap-http.middlewares=planka-https"
      - "traefik.http.services.mindmap-http.loadbalancer.server.port=8080"
      - "traefik.http.routers.mindmap.tls=true"
      - "traefik.http.routers.mindmap.tls.certresolver=internalca"  



  duplicati:
    image: lscr.io/linuxserver/duplicati:latest
    container_name: duplicati
    environment:
      - PUID=0
      - PGID=${DEFAULT_PGID}
      - TZ=${DEFAULT_TIMEZONE}
      #- CLI_ARGS= #optional
    volumes:
      - ./data/dupicatti/config:/config
      - ./backups:/backups
      - ./data:/source:ro
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backup.rule=Host(`${BACKUP_DOMAIN}.${ROOT_DOMAIN}`)"
      - "traefik.http.routers.backup.entrypoints=websecure"       
      - "traefik.http.services.backup.loadbalancer.server.port=8200"

  logserver:
    container_name: logserver
    image: amir20/dozzle:latest
#    healthcheck:
#      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080 || exit 1"]
#      interval: 1m30s
#      timeout: 10s
#      retries: 5    
#      start_period: 15s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # ENSURE READ-ONLY
    environment:
      - DOZZLE_NO_ANALYTICS=true
      - PUID=1001
      - PGID=1001
      - TZ=Europe/London        
    networks:
      default:
        aliases:
          - "${LOGS_DOMAIN}.${ROOT_DOMAIN}" 
    depends_on:
      - traefik    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.logserver.rule=Host(`${LOGS_DOMAIN}.${ROOT_DOMAIN}`)"
      - "traefik.http.routers.logserver.entrypoints=websecure"
      - "traefik.http.routers.logserver.tls=true"
      - "traefik.http.routers.logserver.tls.certresolver=internalca"        
      - "traefik.http.services.logserver.loadbalancer.server.port=8080"

#  watchtower:
#    container_name: watchtower
#    image: containrrr/watchtower
#    restart: always
#    command: --schedule "0 0 4 * * *" --cleanup
#    volumes:
      # NOTE: THe TARGET DOCKER SOCK IS NOT IN THE DEFAULT LOCATION;
      #https://dev.to/bowmanjd/install-docker-on-windows-wsl-without-docker-desktop-34m9
#      - /var/run/docker.sock:/var/run/docker.sock
#    networks:
#      - service



#docker compose -f docker-compose.yml run acmeca --rm -it --env-file .env bash
 
#  acmeca:
#      image: acmeca:latest
#      build: 
#          context: ./build/acmeca
#          dockerfile: Dockerfile            
#      container_name: acmeca
#      restart: unless-stopped
#      environment: 
#          - PASSWORD="${CA_PASSWORD}
#          - AUTHORITY_NAME="${CA_AUTHORITY_NAME}"
#          - CA_AREA="${CA_AREA}"
#          - DNS_TLS_HOSTNAMES="${CA_DNS_TLS_HOSTNAMES}"
#      volumes: 
#          - ./data/acmeca:/home/step
#          - /etc/localtime:/etc/localtime:ro
#          - /etc/timezone:/etc/timezone:ro
          #- /etc/resolv.conf:/etc/resolv.conf:ro     
#      networks:
#        default:
#          aliases:
#            - "${CA_DNS_FQDN}"
#      labels:
#          - "traefik.tcp.routers.acmeca.rule=HostSNI(`*`)"
#          - "traefik.tcp.routers.acmeca.tls.passthrough=true"            
#          - "traefik.tcp.routers.acmeca.service=acmeca@docker"
#          - "traefik.tcp.routers.acmeca.entrypoints=https"            
#          - "traefik.tcp.services.acmeca.loadbalancer.server.port=443"    
#          - com.centurylinklabs.watchtower.enable=true    
#          - "traefik.enable=true"
 
#  paperless-ng:
#    image: linuxserver/paperless-ng
#    container_name: paperless-ng
#    restart: unless-stopped
#    environment:
#      - PUID=1000
#      - PGID=1000
#      #- REDIS_URL= #optional
#    volumes:
#      - ./data/paperless/config:/config
#      - ./data/paperless/data:/data
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.paperless.rule=Host(`paperless.noodle.local`)"
#      - "traefik.http.services.paperless.loadbalancer.server.port=8000"    


## Autoheal - Restart Unhealthy Containers
#  autoheal:
#    container_name: autoheal
#    image: willfarrell/autoheal
#    restart: always
#    volumes:
      # NOTE: THe TARGET DOCKER SOCK IS NOT IN THE DEFAULT LOCATION;
      #https://dev.to/bowmanjd/install-docker-on-windows-wsl-without-docker-desktop-34m9
#      - /mnt/wsl/shared-docker/docker.sock:/var/run/docker.sock
      #- /var/run/docker.sock:/var/run/docker.sock
#    environment:
#      - AUTOHEAL_CONTAINER_LABEL=all
#      - AUTOHEAL_INTERVAL=60 
#      - AUTOHEAL_START_PERIOD=30
